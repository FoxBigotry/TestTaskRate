from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from handlers.utils import get_dollar_rate
from logs.logger import get_logger
from state import Generate


logger = get_logger()
router_message = Router()


@router_message.message(F.text, Generate.start_talk)
async def get_name_and_send_rate(message: Message, state: FSMContext):
    try:
        name = message.text
        dollar_rate = get_dollar_rate()

        if dollar_rate:
            await message.answer(f"–†–∞–¥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É, {name}! –ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ —Å–µ–≥–æ–¥–Ω—è {dollar_rate}—Ä.")
            logger.info("–£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫—É—Ä—Å–æ–º")
        else:
            await message.answer(f"–†–∞–¥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É, {name}! –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞.")
            logger.info("–£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫—É—Ä—Å –Ω–µ –ø–æ–ª—É—á–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞: {e}")
    await state.clear()


@router_message.message()
async def any_message(message: Message):
    await message.answer("–ü—Ä–æ—Å—Ç–∏—Ç–µ —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é üòî.\n"
                         "–°–µ–π—á–∞—Å —è —É–º–µ—é —Ç–æ–ª—å–∫–æ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –∏–º—è –∏ —Å–æ–æ–±—â–∞—Ç—å –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞\n"
                         "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
